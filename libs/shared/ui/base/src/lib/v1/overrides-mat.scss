// Override some styles for Material framework that is being used in most of the
// apps.
//
// NOTE: These styles depend on some root CSS varialbes that should be provided
// in the app.
//
// Please provide the colors for variables in rgb (`255 115 179`) format.
// e.g., `--e-day-lighter-color: 255 255 255;`.
//
// @example
// <style>
//  :root {
//    --e-day-lighter-color: 255 255 255;
//    --e-day-color: 239 239 239;
//    --e-day-darker-color: 220 220 220;
//
//    --e-night-lighter-color: 93 93 93;
//    --e-night-color: 69 69 69;
//    --e-night-darker-color: 0 0 0;
//
//    --e-informative-lighter-color: 208 218 236;
//    --e-informative-color: 162 170 185;
//    --e-informative-darker-color: 128 133 143;
//
//    --e-positive-lighter-color: 209 235 222;
//    --e-positive-color: 162 185 174;
//    --e-positive-darker-color: 130 145 138;
//
//    --e-negative-lighter-color: 234 210 219;
//    --e-negative-color: 186 163 171;
//    --e-negative-darker-color: 153 135 141;
//
//    --e-notice-lighter-color: 227 223 201;
//    --e-notice-color: 185 181 162;
//    --e-notice-darker-color: 153 150 135;
//
//    --e-primary-lighter-color: 208 218 236;
//    --e-primary-color: 162 170 185;
//    --e-primary-darker-color: 128 133 143;
//
//    --e-accent-lighter-color: 227 223 201;
//    --e-accent-color: 185 181 162;
//    --e-accent-darker-color: 153 150 135;
//
//    --e-neutral-color: 136 136 136;
//  }
// </style>

// IMPORTANT:
// Whenever you update the workspace, please always check the following link to
// see if there are any breaking changes in the latest version:
// https://github.com/angular/components/releases

@use '@angular/cdk/overlay-prebuilt.css' as matcdk;
@use '@angular/material' as mat;

// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

:root {
  @include mat.slider-overrides(
    (
      active-track-color: rgb(var(--e-primary-color)),
      handle-color: rgb(var(--e-primary-color)),
      focus-handle-color: rgb(var(--e-primary-color)),
    )
  );
}

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$neutral-palette: (
  50: #fafafa,
  100: #f5f5f5,
  200: #eeeeee,
  300: #e0e0e0,
  400: #bdbdbd,
  500: #9e9e9e,
  600: #757575,
  700: #616161,
  800: #454545,
  900: #212121,
  A100: #ffffff,
  A200: #eeeeee,
  A400: #bdbdbd,
  A700: #616161,
  contrast: (
    50: #333,
    100: #333,
    200: #333,
    300: #333,
    400: #333,
    500: #333,
    600: #fff,
    700: #fff,
    800: #fff,
    900: #fff,
    A100: #333,
    A200: #333,
    A400: #333,
    A700: #fff,
  ),
);
$primary: mat.m2-define-palette($neutral-palette);
$accent: mat.m2-define-palette($neutral-palette);

// The warn palette is optional (defaults to red).
$warn: mat.m2-define-palette(mat.$m2-red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$theme-light: mat.m2-define-light-theme(
  (
    color: (
      primary: $primary,
      accent: $accent,
      warn: $warn,
    ),
  )
);
$theme-dark: mat.m2-define-dark-theme(
  (
    color: (
      primary: $primary,
      accent: $accent,
      warn: $warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($theme-light);
.e-dark {
  @include mat.all-component-colors($theme-dark);
}

.cdk-overlay-container {
  z-index: 10001;
}
